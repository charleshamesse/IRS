'use strict';

angular.module('app')
.service('FileWriter', function () {

  // Globals and dependencies
  var fs = require('fs');

  // Main write method
  this.write = function(path, content) {
    fs.writeFile(path, content, 'utf8', (err) => {
      if (err) throw err;
    });
  }

  // Content generation
  this.makeResourcesDir = function(path) {
    fs.stat(path, function(err, stats) {
    //Check if error defined and the error code is "not exists"
    if (err && err.errno === 34) {
      //Create the directory, call the callback.
      fs.mkdir(path, (err) => {
        if (err) throw err;
      });
    }
    // else, it exists
  });
  }

  // Parameters
  this.writeParameterFile = function(path, parameters) {
    var content = '### PARAMETER FILE\n### AUTO-GENERATED BY IR STUDIO\n'
    + '#name\tswitch\ttype\tvalues\t[conditions (using R syntax)]';
    parameters.forEach(function(p) {
      content += '\n' + p.name + '\t"' + p.switch + '"\t' + p.type + '\t' + p.values;
      if(p.conditions != "")
        content += '\t| ' + p.conditions;
    });
    return this.write(path, content);
  };

  // Selection
  this.writeSelectionFile = function(path, parameters) {
    var content = "### PARAMETER SELECTION\n### AUTO-GENERATED BY IR STUDIO\n";
    parameters.forEach(function(p) {
      content += p.name + "\n";
    });
    return this.write(path, content);
  };

  // Candidates
  this.writeCandidatesFile = function(path, candidates) {
    // Globals
    var content = "### INITIAL CANDIDATES\n### AUTO-GENERATED BY IR STUDIO\n";

    // Treat the first line
    candidates.parameters.forEach(function(p) {
      content += p + "\t"
    });
    content += "\n";

    // And the rest
    candidates.candidates.forEach(function(c) {
      c.values.forEach(function(v) {
        content += v + "\t";
      });
      content += "\n";
    });

    // Write
    return this.write(path, content);
  };

});
