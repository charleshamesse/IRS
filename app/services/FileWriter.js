'use strict';

angular.module('app')
.service('FileWriter', function () {

  // Globals and dependencies
  var fs = require('fs');

  // Main write method
  this.write = function(path, content) {
    fs.writeFile(path, content, 'utf8', (err) => {
      if (err) throw err;
    });
  }

  // Mockup data
  var mucontent = '### PARAMETER FILE\n### AUTO-GENERATED BY IR STUDIO\n'
  +'# name		switch		     type	values			[conditions (using R syntax)]\n'
  +'algorithm       "--"                 c		(as,mmas,eas,ras,acs)\n'
  +'localsearch     "--localsearch "     c  	(0, 1, 2, 3)\n'
  +'alpha           "--alpha "           r  	(0.00, 5.00)\n'
  +'beta            "--beta "            r  	(0.00, 10.00)\n'
  +'rho             "--rho  "            r  	(0.01, 1.00)\n'
  +'ants            "--ants "            i	  	(5, 100)\n'
  +'nnls            "--nnls "            i  	(5, 50)			| localsearch %in% c(1, 2, 3)\n'
  +'q0              "--q0 "              r  	(0.0, 1.0) 		| algorithm %in% c("acs")';

  // Content generation
  this.makeResourcesDir = function(path) {
    fs.stat(path, function(err, stats) {
    //Check if error defined and the error code is "not exists"
    if (err && err.errno === 34) {
      //Create the directory, call the callback.
      fs.mkdir(path, (err) => {
        if (err) throw err;
      });
    }
    // else, it exists
  });
  }
  this.writeParameterFile = function(path, parameters) {
    return this.write(path, mucontent);
  };

  this.writeSelectionFile = function(path, parameters) {
    var content = "### PARAMETER SELECTION\n### AUTO-GENERATED BY IR STUDIO\n";
    parameters.forEach(function(p) {
      content += p + "\n";
    });
    return this.write(path, content);
  };

  this.writeCandidatesFile = function(path, candidates) {
    // Globals
    var content = "### INITIAL CANDIDATES\n### AUTO-GENERATED BY IR STUDIO\n";

    // JSON to text conversion: the variable candidates is received is a json tree of the form
    /**
    "candidates": {
      "parameters": ["param1", "param2", "mode", "real", "mutation"],
			"candidates": [{
        [...]
        "values": ["5", "NA", "\"x2\"", "2.0", "\"low\""],
        [...]
			}]
    }
    */

    // Treat the first line
    candidates.parameters.forEach(function(p) {
      content += p + "\t"
    });
    content += "\n";

    // And the rest
    candidates.candidates.forEach(function(c) {
      c.values.forEach(function(v) {
        content += v + "\t";
      });
      content += "\n";
    });

    // Write
    return this.write(path, content);
  };

});
